---
# Upgrade or install latest built version of aur package

# Register latest AUR package version in api_info variable
- name: aur | get metadata from AurJson api
  connection: local
  become: no
  uri: >
    url=https://aur.archlinux.org/rpc.php?type=info&arg={{ item }}
    return_content=yes
    timeout=6
  with_items:
    - "{{ aur_pkg_name }}"
  register: api_info

# Assert that each API call were returning correct info
- assert:
    that:
      - item.status == 200
      - item.json is defined
      - item.json.type == 'info'
      - item.json.resultcount == 1
      - item.json.results is defined
  with_items:
    - "{{ api_info.results }}"
  no_log: True

# Get the installed version of each aur_pkg_name
- name: aur | get installed package version
  shell: pacman -Q | grep {{ item }} | cut -d' ' -f2
  become: yes
  with_items:
    - "{{ aur_pkg_name }}"
  register: pacman_query

# Diff the versions and set filename to {{ downloaded_filepath }}
- name: aur | diff current and latest package version
  shell: echo {{ item.1.item }}-{{ item.1.json.results.Version }}-x86_64.pkg.tar.zst
  when: item.0.stdout < item.1.json.results.Version
  with_together:
    - "{{ pacman_query.results }}"
    - "{{ api_info.results }}"
  register: downloaded_filepath

# Download latest version package from {{ download_url }}
- name: aur | download latest built package to /tmp
  get_url: >
    url='{{ download_url | mandatory }}{{ item.stdout }}'
    dest='/tmp/{{ item.stdout }}'
  when: item.changed == true
  with_items:
    - "{{ downloaded_filepath.results }}"
  register: downloaded_pkg

# Install aur package if downloaded new version
- name: aur | install downloaded package with pacman
  become: yes
  shell: pacman --noconfirm --noprogressbar --needed -U {{ item.0.dest}}
  when: item.0.changed == true and item.0.failed == false
  with_together:
    - "{{ downloaded_pkg.results }}"
    - "{{ aur_pkg_name }}"
  notify: restart {{ item.1 }}
  register: pacman_install_result
  changed_when: pacman_install_result.stdout is defined and pacman_install_result.stdout.find('there is nothing to do') == -1

# Remove downloaded aur packages
- name: aur | remove downloaded package
  file:
    path: '/tmp/{{ item.stdout }}'
    state: absent
  when: item.changed == true
  with_items:
    - "{{ downloaded_filepath.results }}"
